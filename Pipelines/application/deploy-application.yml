name: "Deploy Application"

trigger: none

variables:
  - group: tf-group
  - group: az-group
  - template: ../variables.yml

stages:
- stage: 'Build'
  displayName: 'Build and push'
  jobs:  
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: ubuntu-latest
    steps:

    - task: Docker@2
      displayName: 'Build and push the image to container registry'
      inputs:
        command: buildAndPush
        buildContext: '$(Build.Repository.LocalPath)'
        repository: "$(todoAppRepository)"
        dockerfile: '$(Build.SourcesDirectory)/Application/Dockerfile'
        containerRegistry: "$(containerRegistryConnection)"
        tags: |
          $(tag)

    - task: Docker@2
      displayName: 'Login to ACR for Trivy'
      inputs:
        command: login
        containerRegistry: "$(containerRegistryConnection)"

    - task: trivy@1
      displayName: 'Run Trivy Container Image Scan'
      condition: succeededOrFailed()
      inputs:
        loginDockerConfig: true
        debug: true        
        version: 'latest'
        image: $(containerRegistry)/$(todoAppRepository):$(tag)
        exitCode: 0

    - task: AzureCLI@2
      displayName: 'Update manifest files'    
      inputs:
        addSpnToEnvironment: true
        azureSubscription: '$(serviceConnection)'
        scriptType: bash
        scriptLocation: 'scriptPath'
        scriptPath: 'Scripts/update-manifests.sh'
        failOnStderr: true
        workingDirectory: '$(Build.SourcesDirectory)/Manifests'

    - publish: '$(Build.SourcesDirectory)/Manifests'
      displayName: 'Publish Manifest Files'
      artifact: manifests 

- stage: 'Deploy'
  displayName: 'Deploy the containers'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: 'ubuntu-20.04'
    environment: 'Dev'
    strategy:
      runOnce:
        deploy:
          steps:
          
          - download: current
            artifact: manifests

          - task: KubernetesManifest@1
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              connectionType: azureResourceManager
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: 'Container Registry Connection'
              azureSubscriptionConnection: $(kubernetesClusterConnection)
              azureResourceGroup: $(resourceGroupName)
              kubernetesCluster: $(aksCluster)
              namespace: 'default'
                
          - task: KubernetesManifest@1
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              connectionType: azureResourceManager
              azureSubscriptionConnection: $(kubernetesClusterConnection)
              azureResourceGroup: $(resourceGroupName)
              kubernetesCluster: $(aksCluster)
              namespace: 'default'
              manifests: |
                $(Pipeline.Workspace)/manifests/secretproviderclass.yml                   
                $(Pipeline.Workspace)/manifests/akstododeploy.yml                         
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(todoAppRepository):$(tag)   
                  